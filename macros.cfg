[gcode_macro PRINT_START]
gcode:
    {% set move_accel = printer["gcode_macro User_Variables"].move_accel|default(1000) %}
    {% set travel_feedrate = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    {% set purge_x_t0 = printer["gcode_macro User_Variables"].purge_x_t0 %}
    {% set purge_x_t1 = printer["gcode_macro User_Variables"].purge_x_t1 %}
    {% set purge_x_t2 = printer["gcode_macro User_Variables"].purge_x_t2 %}
    {% set purge_y = printer["gcode_macro User_Variables"].purge_y %}
    {% set purge_length_a = printer["gcode_macro User_Variables"].purge_length_a %}
    {% set purge_length_b = printer["gcode_macro User_Variables"].purge_length_b %}
    SET_VELOCITY_LIMIT ACCEL={move_accel}

    # sanity check
    {% if 'T' + params.INIT not in params %}
        { action_raise_error("Parameters wrong! Macro aborted.") }
    {% endif %}
    {% if params.INIT|int > 3 or params.INIT|int < 0 %}
        { action_raise_error("Parameters wrong! Macro aborted.") }
    {% endif %}

    # set temps
    M190 S{ params.BED }
    {% if 'T0' in params %}
        M104 T0 S{ params.T0 }
    {% endif %}
    {% if 'T1' in params %}
        M104 T1 S{ params.T1 }
    {% endif %}
    {% if 'T2' in params %}
        M104 T2 S{ params.T2 }
    {% endif %}

    # home and level
    G28 XY
    {% if 'T0' in params %}
        T0
    {% endif %}
    {% if 'T1' in params %}
        T1
    {% endif %}
    {% if 'T2' in params %}
        T2
    {% endif %}
    TX
    
    G28 Z
    Z_TILT_ADJUST
    G28 Z

    # mesh
    {% if not 'NOMESH' in params %}
        BED_MESH_CALIBRATE
    {% else %}
        BED_MESH_PROFILE LOAD=default
    {% endif %}
    G0 X150 Y250 Z20 F{travel_feedrate}
    M83

    # purge
    {% if 'T0' in params and params.INIT != 0 %}
        G90
        T0
        G0 X{purge_x_t0} Y{purge_y}
        M109 T0 S{params.T0}
        G0 Z1
        G91
        G0 X{purge_length_a} E{purge_length_a} F400     # first purge
        G0 X2 Z-0.75 F6000
        G0 X{purge_length_b - 2} E1.8 F6000             # second purge
        G0 X-4 Z0.75 E-2 F4200
        G90
        G0 X150 Y150 Z20 F{travel_feedrate}
    {% endif %}
    {% if 'T1' in params and params.INIT != 1 %}
        G90
        T1
        G0 X{purge_x_t1} Y{purge_y}
        M109 T1 S{params.T1}
        G0 Z1
        G91
        G0 X{purge_length_a} E{purge_length_a} F400     # first purge
        G0 X2 Z-0.75 F6000
        G0 X{purge_length_b - 2} E1.8 F6000             # second purge
        G0 X-4 Z0.75 E-2 F4200
        G90
        G0 X150 Y150 Z20 F{travel_feedrate}
    {% endif %}
    {% if 'T2' in params and params.INIT != 2 %}
        G90
        T2
        G0 X{purge_x_t2} Y{purge_y}
        M109 T2 S{params.T2}
        G0 Z1
        G91
        G0 X{purge_length_a} E{purge_length_a} F400     # first purge
        G0 X2 Z-0.75 F6000
        G0 X{purge_length_b - 2} E1.8 F6000             # second purge
        G0 X-4 Z0.75 E-2 F4200
        G90
        G0 X150 Y150 Z20 F{travel_feedrate}
    {% endif %}
    # purge initial tool last
    G90
    T{params.INIT}
    {% if params.INIT|int == 0 %} 
        G0 X{purge_x_t0} Y{purge_y}
        M109 T{params.INIT} S{params.T0}
    {% elif params.INIT|int == 1 %}
        G0 X{purge_x_t1} Y{purge_y}
        M109 T{params.INIT} S{params.T1}
    {% elif params.INIT|int == 2 %}
        G0 X{purge_x_t2} Y{purge_y}
        M109 T{params.INIT} S{params.T2}
    {% endif %}    
    G0 Z1
    G91
    G0 X{purge_length_a} E{purge_length_a} F400     # first purge
    G0 X2 Z-0.75 F6000
    G0 X{purge_length_b - 2} E1.8 F6000             # second purge
    G0 X-4 Z0.75 E-2 F4200
    G90
    

[homing_override]
axes: xyz
gcode:
    {% set move_accel = printer["gcode_macro User_Variables"].move_accel|default(1000) %}
    {% set travel_feedrate = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    SET_VELOCITY_LIMIT ACCEL={move_accel}

    # reset parameters
    {% set home_x, home_y, home_z = False, False, False %}
    SAVE_GCODE_STATE name=home

    #check params

    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}
        {% set home_x, home_y, home_z = True, True, True %}

    {% else %}

        {% if 'X' in params %}
            {% set home_x = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set home_y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set home_z = True %}
        {% endif %}

    {% endif %}

    #check if xy homed -> if not, home xy even if not in params (only for home z)

    {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %}
        {% if home_z %}
            {% set home_x, home_y = True, True %}
        {% endif  %}
    {% endif %}

    # z hop

    {% if home_x or home_y %}
        {% if 'z' not in printer.toolhead.homed_axes %}
            SET_KINEMATIC_POSITION Z=0
            G90
            G0 Z15F{travel_feedrate}
            M84
        {% endif %}
    {% endif %}

    # home y
    {% if home_y %}
        G28 Y
        G91
        G0 Y5 F{travel_feedrate}
    {% endif %}

    # home x
    {% if home_x %}
        G28 X
        G91
        G0 X-5 F{travel_feedrate}
    {% endif %}

    # home z
    {% if home_z %}
        TX
        G90
        G0 X150 Y150 F{travel_feedrate}
        G28 Z
        G0 Z10 
    {% endif %}
    RESTORE_GCODE_STATE name=home


[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
description:
gcode:
    TX
    _Z_TILT_ADJUST {% for p in params
          %}{'%s=%s ' % (p, params[p])}{%
         endfor %}


[gcode_button switch_c]
pin: PC15
press_gcode:

[gcode_button switch_t0]
pin: PF4
press_gcode:

[gcode_button switch_t1]
pin: PF3
press_gcode:

[gcode_button switch_t2]
pin: PF1
press_gcode:

[gcode_macro query_switches]
gcode:
    # klipper macros for buttos
    query_button button=switch_c
    query_button button=switch_t0
    query_button button=switch_t1
    query_button button=switch_t2
    M400

[gcode_macro check_switch] # params syntax ex: check_switch c=1 t0=0 t1=1 t2=0
gcode:
    # 0 = RELEASED, 1 = PRESSED
    # carriage
    {% if 'C' in params %} # gross/chlii schribig isch anschienend wichtig f√ºr params gopferdammi
    {% set c = params.C|int %} # gross/chlii schribig
        {% if c == 0 %}
            {% if printer["gcode_button switch_c"].state != 'RELEASED' %}
                { action_raise_error("Toolchange failed! Switch on carriage wrong!") }
            {% endif %}
        {% elif c == 1 %}
            {% if printer["gcode_button switch_c"].state != 'PRESSED' %}
                { action_raise_error("Toolchange failed! Switch on carriage wrong!") }
            {% endif %}
        {% endif %}
    {% endif %}

    # t0
    {% if 'T0' in params %} # gross/chlii schribig
    {% set t0 = params.T0|int %} # gross/chlii schribig
        {% if t0 == 0 %}
            {% if printer["gcode_button switch_t0"].state != 'RELEASED' %}
                { action_raise_error("Toolchange failed! Switch on magazine 0 wrong!") }
            {% endif %}
        {% elif t0 == 1 %}
            {% if printer["gcode_button switch_t0"].state != 'PRESSED' %}
                { action_raise_error("Toolchange failed! Switch on magazine 0 wrong!") }
            {% endif %}
        {% endif %}
    {% endif %}

    # t1
    {% if 'T1' in params %} # gross/chlii schribig
    {% set t1 = params.T1|int %} # gross/chlii schribig
        {% if t1 == 0 %}
            {% if printer["gcode_button switch_t1"].state != 'RELEASED' %}
                { action_raise_error("Toolchange failed! Switch on magazine 1 wrong!") }
            {% endif %}
        {% elif t1 == 1 %}
            {% if printer["gcode_button switch_t1"].state != 'PRESSED' %}
                { action_raise_error("Toolchange failed! Switch on magazine 1 wrong!") }
            {% endif %}
        {% endif %}
    {% endif %}

    # t2
    {% if 'T2' in params %}  # gross/chlii schribig
    {% set t2 = params.T2|int %} # gross/chlii schribig
        {% if t2 == 0 %}
            {% if printer["gcode_button switch_t2"].state != 'RELEASED' %}
                { action_raise_error("Toolchange failed! Switch on magazine 2 wrong!") }
            {% endif %}
        {% elif t2 == 1 %}
            {% if printer["gcode_button switch_t2"].state != 'PRESSED' %}
                { action_raise_error("Toolchange failed! Switch on magazine 2 wrong!") }
            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro TX]
description: park current tool
gcode:
    SAVE_GCODE_STATE name=TX
    query_switches
    M400
    {% if printer["gcode_button switch_c"].state != 'PRESSED' %} # check whether any tool is attached
        check_switch t0=1 t1=1 t2=1
        M400
        { action_respond_info("no tool attached") }
    {% else %}
        {% if 'x' not in printer.toolhead.homed_axes or 'y' not in printer.toolhead.homed_axes %} # check if xy homed
            { action_raise_error("XY not homed") }
        {% endif %}
        {% if printer["gcode_button switch_t0"].state != 'PRESSED' %} # check whether tool 0 is attached
            check_switch c=1 t1=1 t2=1
            M400
            park_t0
        {% elif printer["gcode_button switch_t1"].state != 'PRESSED' %} # check whether tool 1 is attached
            check_switch c=1 t0=1 t2=1
            M400
            park_t1
        {% elif printer["gcode_button switch_t2"].state != 'PRESSED' %} # check whether tool 2 is attached
            check_switch c=1 t0=1 t1=1
            M400
            park_t2
        {% endif %}
    {% endif %}
    RESTORE_GCODE_STATE name=TX


[gcode_macro T0]
gcode:
    { action_raise_error("T0 not configured yet") }
    TX # park current tool
    SAVE_GCODE_STATE name=T0
    {% set move_accel = printer["gcode_macro User_Variables"].move_accel|default(1000) %}
    {% set travel_feedrate = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    {% set t_accel = printer["gcode_macro User_Variables"].t_accel|default(1000) %}
    {% set t_feedrate = printer["gcode_macro User_Variables"].t_speed * 60 %}
    {% set x_t0 = printer["gcode_macro User_Variables"].x_t0|float %}
    {% set y_t0 = printer["gcode_macro User_Variables"].y_t0|float %}
    {% set move_x1 = printer["gcode_macro User_Variables"].move_x1|float %}
    {% set move_x2 = printer["gcode_macro User_Variables"].move_x2|float %}
    {% set move_x3 = printer["gcode_macro User_Variables"].move_x3|float %}
    SET_VELOCITY_LIMIT ACCEL={move_accel}
    G90
    G0 X{x_t0} Y300 F{travel_feedrate} # approach
    query_switches  # check for crash
    M400
    check_switch c=0 t0=1
    SET_VELOCITY_LIMIT ACCEL={t_accel}
    G0 Y{y_t0} F{t_feedrate}    # move into tool
    query_switches  # check for crash
    M400
    check_switch c=1 t0=1
    G91             # relative coordinates
    G0 X{move_x1}  # remove tool
    query_switches  # check for crash
    M400
    check_switch c=1 t0=0
    G0 X{move_x2}  # un"click" latches
    G0 X{move_x3}  # center latches for y move
    query_switches  # check for crash
    M400
    check_switch c=1 t0=0
    G90             # absolute coordinates
    G0 Y300
    query_switches  # check for crash
    M400
    check_switch c=1 t0=0
    RESTORE_GCODE_STATE name=T0


[gcode_macro T1]
gcode:
    TX # park current tool
    SAVE_GCODE_STATE name=T1
    {% set move_accel = printer["gcode_macro User_Variables"].move_accel|default(1000) %}
    {% set travel_feedrate = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    {% set t_accel = printer["gcode_macro User_Variables"].t_accel|default(1000) %}
    {% set t_feedrate = printer["gcode_macro User_Variables"].t_speed * 60 %}
    {% set x_t1 = printer["gcode_macro User_Variables"].x_t1|float %}
    {% set y_t1 = printer["gcode_macro User_Variables"].y_t1|float %}
    {% set move_x1 = printer["gcode_macro User_Variables"].move_x1|float %}
    {% set move_x2 = printer["gcode_macro User_Variables"].move_x2|float %}
    {% set move_x3 = printer["gcode_macro User_Variables"].move_x3|float %}
    SET_VELOCITY_LIMIT ACCEL={move_accel}
    G90
    G0 X{x_t1} Y300 F{travel_feedrate} # approach
    query_switches  # check for crash
    M400
    check_switch c=0 t1=1
    SET_VELOCITY_LIMIT ACCEL={t_accel}
    G0 Y{y_t1 - 15}
    G0 Y{y_t1} F{t_feedrate}    # move into tool
    query_switches  # check for crash
    M400
    check_switch c=1 t1=1
    G91             # relative coordinates
    G0 X{move_x1}  # remove tool
    query_switches  # check for crash
    M400
    check_switch c=1 t1=0
    SET_VELOCITY_LIMIT ACCEL={move_accel}
    G0 X{move_x2}  # un"click" latches
    G0 X{move_x3} F{travel_feedrate} # center latches for y move
    G90             # absolute coordinates
    G0 Y300
    query_switches  # check for crash
    M400
    check_switch c=1 t1=0
    RESTORE_GCODE_STATE name=T1


[gcode_macro park_t0]
gcode:
    SAVE_GCODE_STATE name=park_t0
    {% set move_accel = printer["gcode_macro User_Variables"].move_accel|default(1000) %}
    {% set travel_feedrate = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    {% set t_accel = printer["gcode_macro User_Variables"].t_accel|default(1000) %}
    {% set t_feedrate = printer["gcode_macro User_Variables"].t_speed * 60 %}
    {% set x_t0 = printer["gcode_macro User_Variables"].x_t0|float %}
    {% set y_t0 = printer["gcode_macro User_Variables"].y_t0|float %}
    {% set move_x1 = printer["gcode_macro User_Variables"].move_x1|float %}
    {% set move_x2 = printer["gcode_macro User_Variables"].move_x2|float %}
    {% set move_x3 = printer["gcode_macro User_Variables"].move_x3|float %}
    SET_VELOCITY_LIMIT ACCEL={move_accel}
    G90
    G0 X{x_t0 + move_x1 + move_x2 + move_x3} Y300 F{travel_feedrate} # approach
    query_switches  # check for crash
    M400
    check_switch c=1 t0=0
    SET_VELOCITY_LIMIT ACCEL={t_accel}
    G0 Y{y_t0} F{t_feedrate}    # move into magazine
    query_switches  # check for crash
    M400
    check_switch c=1 t0=0
    G0 X{x_t0}  # park
    query_switches  # check for crash
    M400
    check_switch t0=1
    SET_VELOCITY_LIMIT ACCEL={move_accel}
    G0 Y300
    query_switches  # check for crash
    M400
    check_switch c=0 t0=1
    RESTORE_GCODE_STATE name=park_t0


[gcode_macro park_t1]
gcode:
    SAVE_GCODE_STATE name=park_t1
    {% set move_accel = printer["gcode_macro User_Variables"].move_accel|default(1000) %}
    {% set travel_feedrate = printer["gcode_macro User_Variables"].travel_speed * 60 %}
    {% set t_accel = printer["gcode_macro User_Variables"].t_accel|default(1000) %}
    {% set t_feedrate = printer["gcode_macro User_Variables"].t_speed * 60 %}
    {% set x_t1 = printer["gcode_macro User_Variables"].x_t1|float %}
    {% set y_t1 = printer["gcode_macro User_Variables"].y_t1|float %}
    {% set move_x1 = printer["gcode_macro User_Variables"].move_x1|float %}
    {% set move_x2 = printer["gcode_macro User_Variables"].move_x2|float %}
    {% set move_x3 = printer["gcode_macro User_Variables"].move_x3|float %}
    SET_VELOCITY_LIMIT ACCEL={move_accel}
    G90
    G0 X{x_t1 + move_x1 + move_x2 + move_x3} Y300 F{travel_feedrate} # approach
    query_switches  # check for crash
    M400
    check_switch c=1 t1=0
    SET_VELOCITY_LIMIT ACCEL={t_accel}
    G0 Y{y_t1 - 15}
    G0 Y{y_t1} F{t_feedrate}    # move into magazine
    query_switches  # check for crash
    M400
    check_switch c=1 t1=0
    G0 X{x_t1}  # park
    query_switches  # check for crash
    M400
    check_switch t1=1
    G0 Y{y_t1 - 15}
    SET_VELOCITY_LIMIT ACCEL={move_accel}
    G0 Y300 F{travel_feedrate}
    RESTORE_GCODE_STATE name=park_t1








#########################
#          TEST
#########################
[gcode_macro test]
gcode:
    query_switches
    M400
    check_switch c=0 t1=1
    G91
    G0 Z1
    query_switches
    M400
    check_switch c=0 t1=0
    g0 Z-1


    
[gcode_macro abort_test]
gcode:
    {% set a = params.A|int %}
    {% if a == 0 %}
        { action_raise_error("a is zero") }
    {% endif %}
